//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"

namespace Bcm.Aed.FormulaOne.WebAPI
{
	using System = global::System;

	[System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class DriverClient
	{
#pragma warning disable 8618 // Set by constructor via BaseUrl property
		private string _baseUrl;
#pragma warning restore 8618 // Set by constructor via BaseUrl property
		private System.Net.Http.HttpClient _httpClient;
		private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);

		public DriverClient(string baseUrl, System.Net.Http.HttpClient httpClient)
		{
			BaseUrl = baseUrl;
			_httpClient = httpClient;
		}

		private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
		{
			var settings = new Newtonsoft.Json.JsonSerializerSettings();
			UpdateJsonSerializerSettings(settings);
			return settings;
		}

		public string BaseUrl
		{
			get { return _baseUrl; }
			set
			{
				_baseUrl = value;
				if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
					_baseUrl += '/';
			}
		}

		protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

		static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

		partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
		partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
		partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual System.Threading.Tasks.Task DriversPostAsync(Driver body)
		{
			return DriversPostAsync(body, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task DriversPostAsync(Driver body, System.Threading.CancellationToken cancellationToken)
		{
			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
					var content_ = new System.Net.Http.StringContent(json_);
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
					// Operation Path: "Drivers"
					urlBuilder_.Append("Drivers");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							return;
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Driver>> DriversGetAsync()
		{
			return DriversGetAsync(System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Driver>> DriversGetAsync(System.Threading.CancellationToken cancellationToken)
		{
			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
					// Operation Path: "Drivers"
					urlBuilder_.Append("Drivers");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Driver>>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual System.Threading.Tasks.Task DriversPutAsync(Driver body)
		{
			return DriversPutAsync(body, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task DriversPutAsync(Driver body, System.Threading.CancellationToken cancellationToken)
		{
			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
					var content_ = new System.Net.Http.StringContent(json_);
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("PUT");

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
					// Operation Path: "Drivers"
					urlBuilder_.Append("Drivers");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							return;
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual System.Threading.Tasks.Task<Driver> DriversGetAsync(int driverID)
		{
			return DriversGetAsync(driverID, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<Driver> DriversGetAsync(int driverID, System.Threading.CancellationToken cancellationToken)
		{
			if (driverID == null)
				throw new System.ArgumentNullException("driverID");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
					// Operation Path: "Drivers/Drivers/{driverID}"
					urlBuilder_.Append("Drivers/Drivers/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(driverID, System.Globalization.CultureInfo.InvariantCulture)));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<Driver>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual System.Threading.Tasks.Task DriversDeleteAsync(int driverID)
		{
			return DriversDeleteAsync(driverID, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task DriversDeleteAsync(int driverID, System.Threading.CancellationToken cancellationToken)
		{
			if (driverID == null)
				throw new System.ArgumentNullException("driverID");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("DELETE");

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
					// Operation Path: "Drivers/Drivers/{driverID}"
					urlBuilder_.Append("Drivers/Drivers/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(driverID, System.Globalization.CultureInfo.InvariantCulture)));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							return;
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		protected struct ObjectResponseResult<T>
		{
			public ObjectResponseResult(T responseObject, string responseText)
			{
				this.Object = responseObject;
				this.Text = responseText;
			}

			public T Object { get; }

			public string Text { get; }
		}

		public bool ReadResponseAsString { get; set; }

		protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
		{
			if (response == null || response.Content == null)
			{
				return new ObjectResponseResult<T>(default(T), string.Empty);
			}

			if (ReadResponseAsString)
			{
				var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
				try
				{
					var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
					return new ObjectResponseResult<T>(typedBody, responseText);
				}
				catch (Newtonsoft.Json.JsonException exception)
				{
					var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
					throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
				}
			}
			else
			{
				try
				{
					using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
					using (var streamReader = new System.IO.StreamReader(responseStream))
					using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
					{
						var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
						var typedBody = serializer.Deserialize<T>(jsonTextReader);
						return new ObjectResponseResult<T>(typedBody, string.Empty);
					}
				}
				catch (Newtonsoft.Json.JsonException exception)
				{
					var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
					throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
				}
			}
		}

		private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
		{
			if (value == null)
			{
				return "";
			}

			if (value is System.Enum)
			{
				var name = System.Enum.GetName(value.GetType(), value);
				if (name != null)
				{
					var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
					if (field != null)
					{
						var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
							as System.Runtime.Serialization.EnumMemberAttribute;
						if (attribute != null)
						{
							return attribute.Value != null ? attribute.Value : name;
						}
					}

					var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
					return converted == null ? string.Empty : converted;
				}
			}
			else if (value is bool)
			{
				return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
			}
			else if (value is byte[])
			{
				return System.Convert.ToBase64String((byte[])value);
			}
			else if (value is string[])
			{
				return string.Join(",", (string[])value);
			}
			else if (value.GetType().IsArray)
			{
				var valueArray = (System.Array)value;
				var valueTextArray = new string[valueArray.Length];
				for (var i = 0; i < valueArray.Length; i++)
				{
					valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
				}
				return string.Join(",", valueTextArray);
			}

			var result = System.Convert.ToString(value, cultureInfo);
			return result == null ? "" : result;
		}
	}

	[System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class MetaClient
	{
#pragma warning disable 8618 // Set by constructor via BaseUrl property
		private string _baseUrl;
#pragma warning restore 8618 // Set by constructor via BaseUrl property
		private System.Net.Http.HttpClient _httpClient;
		private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);

		public MetaClient(string baseUrl, System.Net.Http.HttpClient httpClient)
		{
			BaseUrl = baseUrl;
			_httpClient = httpClient;
		}

		private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
		{
			var settings = new Newtonsoft.Json.JsonSerializerSettings();
			UpdateJsonSerializerSettings(settings);
			return settings;
		}

		public string BaseUrl
		{
			get { return _baseUrl; }
			set
			{
				_baseUrl = value;
				if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
					_baseUrl += '/';
			}
		}

		protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

		static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

		partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
		partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
		partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Country>> CountriesGetAsync()
		{
			return CountriesGetAsync(System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Country>> CountriesGetAsync(System.Threading.CancellationToken cancellationToken)
		{
			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
					// Operation Path: "Metadata/Countries"
					urlBuilder_.Append("Metadata/Countries");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Country>>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual System.Threading.Tasks.Task CountriesPostAsync(Country body)
		{
			return CountriesPostAsync(body, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task CountriesPostAsync(Country body, System.Threading.CancellationToken cancellationToken)
		{
			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
					var content_ = new System.Net.Http.StringContent(json_);
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
					// Operation Path: "Metadata/Countries"
					urlBuilder_.Append("Metadata/Countries");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							return;
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual System.Threading.Tasks.Task CountriesPutAsync(Country body)
		{
			return CountriesPutAsync(body, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task CountriesPutAsync(Country body, System.Threading.CancellationToken cancellationToken)
		{
			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
					var content_ = new System.Net.Http.StringContent(json_);
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("PUT");

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
					// Operation Path: "Metadata/Countries"
					urlBuilder_.Append("Metadata/Countries");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							return;
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual System.Threading.Tasks.Task CountriesDeleteAsync(Country body)
		{
			return CountriesDeleteAsync(body, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task CountriesDeleteAsync(Country body, System.Threading.CancellationToken cancellationToken)
		{
			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
					var content_ = new System.Net.Http.StringContent(json_);
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("DELETE");

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
					// Operation Path: "Metadata/Countries"
					urlBuilder_.Append("Metadata/Countries");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							return;
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual System.Threading.Tasks.Task<Country> CountryAsync(int countryId)
		{
			return CountryAsync(countryId, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<Country> CountryAsync(int countryId, System.Threading.CancellationToken cancellationToken)
		{
			if (countryId == null)
				throw new System.ArgumentNullException("countryId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
					// Operation Path: "Metadata/Country/{countryId}"
					urlBuilder_.Append("Metadata/Country/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(countryId, System.Globalization.CultureInfo.InvariantCulture)));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<Country>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual System.Threading.Tasks.Task TeamsPostAsync(Team body)
		{
			return TeamsPostAsync(body, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task TeamsPostAsync(Team body, System.Threading.CancellationToken cancellationToken)
		{
			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
					var content_ = new System.Net.Http.StringContent(json_);
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
					// Operation Path: "Metadata/Teams"
					urlBuilder_.Append("Metadata/Teams");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							return;
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Team>> TeamsGetAsync()
		{
			return TeamsGetAsync(System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Team>> TeamsGetAsync(System.Threading.CancellationToken cancellationToken)
		{
			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
					// Operation Path: "Metadata/Teams"
					urlBuilder_.Append("Metadata/Teams");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Team>>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual System.Threading.Tasks.Task TeamsPutAsync(Team body)
		{
			return TeamsPutAsync(body, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task TeamsPutAsync(Team body, System.Threading.CancellationToken cancellationToken)
		{
			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
					var content_ = new System.Net.Http.StringContent(json_);
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("PUT");

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
					// Operation Path: "Metadata/Teams"
					urlBuilder_.Append("Metadata/Teams");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							return;
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual System.Threading.Tasks.Task<Team> TeamsGetAsync(int teamID)
		{
			return TeamsGetAsync(teamID, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<Team> TeamsGetAsync(int teamID, System.Threading.CancellationToken cancellationToken)
		{
			if (teamID == null)
				throw new System.ArgumentNullException("teamID");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
					// Operation Path: "Metadata/Teams/{teamID}"
					urlBuilder_.Append("Metadata/Teams/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(teamID, System.Globalization.CultureInfo.InvariantCulture)));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<Team>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual System.Threading.Tasks.Task TeamsDeleteAsync(int teamID)
		{
			return TeamsDeleteAsync(teamID, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task TeamsDeleteAsync(int teamID, System.Threading.CancellationToken cancellationToken)
		{
			if (teamID == null)
				throw new System.ArgumentNullException("teamID");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("DELETE");

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
					// Operation Path: "Metadata/Teams/{teamID}"
					urlBuilder_.Append("Metadata/Teams/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(teamID, System.Globalization.CultureInfo.InvariantCulture)));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							return;
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		protected struct ObjectResponseResult<T>
		{
			public ObjectResponseResult(T responseObject, string responseText)
			{
				this.Object = responseObject;
				this.Text = responseText;
			}

			public T Object { get; }

			public string Text { get; }
		}

		public bool ReadResponseAsString { get; set; }

		protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
		{
			if (response == null || response.Content == null)
			{
				return new ObjectResponseResult<T>(default(T), string.Empty);
			}

			if (ReadResponseAsString)
			{
				var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
				try
				{
					var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
					return new ObjectResponseResult<T>(typedBody, responseText);
				}
				catch (Newtonsoft.Json.JsonException exception)
				{
					var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
					throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
				}
			}
			else
			{
				try
				{
					using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
					using (var streamReader = new System.IO.StreamReader(responseStream))
					using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
					{
						var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
						var typedBody = serializer.Deserialize<T>(jsonTextReader);
						return new ObjectResponseResult<T>(typedBody, string.Empty);
					}
				}
				catch (Newtonsoft.Json.JsonException exception)
				{
					var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
					throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
				}
			}
		}

		private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
		{
			if (value == null)
			{
				return "";
			}

			if (value is System.Enum)
			{
				var name = System.Enum.GetName(value.GetType(), value);
				if (name != null)
				{
					var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
					if (field != null)
					{
						var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
							as System.Runtime.Serialization.EnumMemberAttribute;
						if (attribute != null)
						{
							return attribute.Value != null ? attribute.Value : name;
						}
					}

					var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
					return converted == null ? string.Empty : converted;
				}
			}
			else if (value is bool)
			{
				return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
			}
			else if (value is byte[])
			{
				return System.Convert.ToBase64String((byte[])value);
			}
			else if (value is string[])
			{
				return string.Join(",", (string[])value);
			}
			else if (value.GetType().IsArray)
			{
				var valueArray = (System.Array)value;
				var valueTextArray = new string[valueArray.Length];
				for (var i = 0; i < valueArray.Length; i++)
				{
					valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
				}
				return string.Join(",", valueTextArray);
			}

			var result = System.Convert.ToString(value, cultureInfo);
			return result == null ? "" : result;
		}
	}

	[System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class RaceClient
	{
#pragma warning disable 8618 // Set by constructor via BaseUrl property
		private string _baseUrl;
#pragma warning restore 8618 // Set by constructor via BaseUrl property
		private System.Net.Http.HttpClient _httpClient;
		private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);

		public RaceClient(string baseUrl, System.Net.Http.HttpClient httpClient)
		{
			BaseUrl = baseUrl;
			_httpClient = httpClient;
		}

		private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
		{
			var settings = new Newtonsoft.Json.JsonSerializerSettings();
			UpdateJsonSerializerSettings(settings);
			return settings;
		}

		public string BaseUrl
		{
			get { return _baseUrl; }
			set
			{
				_baseUrl = value;
				if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
					_baseUrl += '/';
			}
		}

		protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

		static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

		partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
		partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
		partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual System.Threading.Tasks.Task RacetracksPostAsync(Racetrack body)
		{
			return RacetracksPostAsync(body, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task RacetracksPostAsync(Racetrack body, System.Threading.CancellationToken cancellationToken)
		{
			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
					var content_ = new System.Net.Http.StringContent(json_);
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
					// Operation Path: "Races/Racetracks"
					urlBuilder_.Append("Races/Racetracks");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							return;
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Racetrack>> RacetracksGetAsync()
		{
			return RacetracksGetAsync(System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Racetrack>> RacetracksGetAsync(System.Threading.CancellationToken cancellationToken)
		{
			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
					// Operation Path: "Races/Racetracks"
					urlBuilder_.Append("Races/Racetracks");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Racetrack>>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual System.Threading.Tasks.Task RacetracksPutAsync(Racetrack body)
		{
			return RacetracksPutAsync(body, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task RacetracksPutAsync(Racetrack body, System.Threading.CancellationToken cancellationToken)
		{
			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
					var content_ = new System.Net.Http.StringContent(json_);
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("PUT");

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
					// Operation Path: "Races/Racetracks"
					urlBuilder_.Append("Races/Racetracks");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							return;
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual System.Threading.Tasks.Task<Racetrack> RacetracksGetAsync(int racetrackID)
		{
			return RacetracksGetAsync(racetrackID, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<Racetrack> RacetracksGetAsync(int racetrackID, System.Threading.CancellationToken cancellationToken)
		{
			if (racetrackID == null)
				throw new System.ArgumentNullException("racetrackID");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
					// Operation Path: "Races/Racetracks/{RacetrackID}"
					urlBuilder_.Append("Races/Racetracks/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(racetrackID, System.Globalization.CultureInfo.InvariantCulture)));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<Racetrack>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual System.Threading.Tasks.Task RacetracksDeleteAsync(int racetrackID)
		{
			return RacetracksDeleteAsync(racetrackID, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task RacetracksDeleteAsync(int racetrackID, System.Threading.CancellationToken cancellationToken)
		{
			if (racetrackID == null)
				throw new System.ArgumentNullException("racetrackID");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("DELETE");

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
					// Operation Path: "Races/Racetracks/{RacetrackID}"
					urlBuilder_.Append("Races/Racetracks/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(racetrackID, System.Globalization.CultureInfo.InvariantCulture)));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							return;
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual System.Threading.Tasks.Task RacesPostAsync(Race body)
		{
			return RacesPostAsync(body, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task RacesPostAsync(Race body, System.Threading.CancellationToken cancellationToken)
		{
			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
					var content_ = new System.Net.Http.StringContent(json_);
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
					// Operation Path: "Races"
					urlBuilder_.Append("Races");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							return;
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Race>> RacesGetAsync()
		{
			return RacesGetAsync(System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Race>> RacesGetAsync(System.Threading.CancellationToken cancellationToken)
		{
			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
					// Operation Path: "Races"
					urlBuilder_.Append("Races");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Race>>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual System.Threading.Tasks.Task RacesPutAsync(Race body)
		{
			return RacesPutAsync(body, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task RacesPutAsync(Race body, System.Threading.CancellationToken cancellationToken)
		{
			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
					var content_ = new System.Net.Http.StringContent(json_);
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("PUT");

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
					// Operation Path: "Races"
					urlBuilder_.Append("Races");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							return;
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual System.Threading.Tasks.Task<Race> RacesGetAsync(int racetrackID, int driverID)
		{
			return RacesGetAsync(racetrackID, driverID, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<Race> RacesGetAsync(int racetrackID, int driverID, System.Threading.CancellationToken cancellationToken)
		{
			if (racetrackID == null)
				throw new System.ArgumentNullException("racetrackID");

			if (driverID == null)
				throw new System.ArgumentNullException("driverID");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
					// Operation Path: "Races/Races/{RacetrackID}/{driverID}"
					urlBuilder_.Append("Races/Races/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(racetrackID, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append('/');
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(driverID, System.Globalization.CultureInfo.InvariantCulture)));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<Race>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual System.Threading.Tasks.Task RacesDeleteAsync(int racetrackID, int driverID)
		{
			return RacesDeleteAsync(racetrackID, driverID, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task RacesDeleteAsync(int racetrackID, int driverID, System.Threading.CancellationToken cancellationToken)
		{
			if (racetrackID == null)
				throw new System.ArgumentNullException("racetrackID");

			if (driverID == null)
				throw new System.ArgumentNullException("driverID");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("DELETE");

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
					// Operation Path: "Races/Races/{RacetrackID}/{driverID}"
					urlBuilder_.Append("Races/Races/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(racetrackID, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append('/');
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(driverID, System.Globalization.CultureInfo.InvariantCulture)));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							return;
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual System.Threading.Tasks.Task RaceTypePostAsync(RaceType body)
		{
			return RaceTypePostAsync(body, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task RaceTypePostAsync(RaceType body, System.Threading.CancellationToken cancellationToken)
		{
			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
					var content_ = new System.Net.Http.StringContent(json_);
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
					// Operation Path: "Races/RaceType"
					urlBuilder_.Append("Races/RaceType");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							return;
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RaceType>> RaceTypeGetAsync()
		{
			return RaceTypeGetAsync(System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RaceType>> RaceTypeGetAsync(System.Threading.CancellationToken cancellationToken)
		{
			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
					// Operation Path: "Races/RaceType"
					urlBuilder_.Append("Races/RaceType");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RaceType>>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual System.Threading.Tasks.Task RaceTypePutAsync(RaceType body)
		{
			return RaceTypePutAsync(body, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task RaceTypePutAsync(RaceType body, System.Threading.CancellationToken cancellationToken)
		{
			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
					var content_ = new System.Net.Http.StringContent(json_);
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("PUT");

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
					// Operation Path: "Races/RaceType"
					urlBuilder_.Append("Races/RaceType");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							return;
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual System.Threading.Tasks.Task<RaceType> RaceTypeGetAsync(int raceTypeID)
		{
			return RaceTypeGetAsync(raceTypeID, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<RaceType> RaceTypeGetAsync(int raceTypeID, System.Threading.CancellationToken cancellationToken)
		{
			if (raceTypeID == null)
				throw new System.ArgumentNullException("raceTypeID");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
					// Operation Path: "Races/RaceType/{raceTypeID}"
					urlBuilder_.Append("Races/RaceType/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(raceTypeID, System.Globalization.CultureInfo.InvariantCulture)));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<RaceType>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual System.Threading.Tasks.Task RaceTypeDeleteAsync(int raceTypeID)
		{
			return RaceTypeDeleteAsync(raceTypeID, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task RaceTypeDeleteAsync(int raceTypeID, System.Threading.CancellationToken cancellationToken)
		{
			if (raceTypeID == null)
				throw new System.ArgumentNullException("raceTypeID");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("DELETE");

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
					// Operation Path: "Races/RaceType/{raceTypeID}"
					urlBuilder_.Append("Races/RaceType/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(raceTypeID, System.Globalization.CultureInfo.InvariantCulture)));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							return;
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		protected struct ObjectResponseResult<T>
		{
			public ObjectResponseResult(T responseObject, string responseText)
			{
				this.Object = responseObject;
				this.Text = responseText;
			}

			public T Object { get; }

			public string Text { get; }
		}

		public bool ReadResponseAsString { get; set; }

		protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
		{
			if (response == null || response.Content == null)
			{
				return new ObjectResponseResult<T>(default(T), string.Empty);
			}

			if (ReadResponseAsString)
			{
				var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
				try
				{
					var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
					return new ObjectResponseResult<T>(typedBody, responseText);
				}
				catch (Newtonsoft.Json.JsonException exception)
				{
					var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
					throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
				}
			}
			else
			{
				try
				{
					using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
					using (var streamReader = new System.IO.StreamReader(responseStream))
					using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
					{
						var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
						var typedBody = serializer.Deserialize<T>(jsonTextReader);
						return new ObjectResponseResult<T>(typedBody, string.Empty);
					}
				}
				catch (Newtonsoft.Json.JsonException exception)
				{
					var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
					throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
				}
			}
		}

		private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
		{
			if (value == null)
			{
				return "";
			}

			if (value is System.Enum)
			{
				var name = System.Enum.GetName(value.GetType(), value);
				if (name != null)
				{
					var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
					if (field != null)
					{
						var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
							as System.Runtime.Serialization.EnumMemberAttribute;
						if (attribute != null)
						{
							return attribute.Value != null ? attribute.Value : name;
						}
					}

					var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
					return converted == null ? string.Empty : converted;
				}
			}
			else if (value is bool)
			{
				return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
			}
			else if (value is byte[])
			{
				return System.Convert.ToBase64String((byte[])value);
			}
			else if (value is string[])
			{
				return string.Join(",", (string[])value);
			}
			else if (value.GetType().IsArray)
			{
				var valueArray = (System.Array)value;
				var valueTextArray = new string[valueArray.Length];
				for (var i = 0; i < valueArray.Length; i++)
				{
					valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
				}
				return string.Join(",", valueTextArray);
			}

			var result = System.Convert.ToString(value, cultureInfo);
			return result == null ? "" : result;
		}
	}

	[System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class ResultsClient
	{
#pragma warning disable 8618 // Set by constructor via BaseUrl property
		private string _baseUrl;
#pragma warning restore 8618 // Set by constructor via BaseUrl property
		private System.Net.Http.HttpClient _httpClient;
		private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);

		public ResultsClient(string baseUrl, System.Net.Http.HttpClient httpClient)
		{
			BaseUrl = baseUrl;
			_httpClient = httpClient;
		}

		private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
		{
			var settings = new Newtonsoft.Json.JsonSerializerSettings();
			UpdateJsonSerializerSettings(settings);
			return settings;
		}

		public string BaseUrl
		{
			get { return _baseUrl; }
			set
			{
				_baseUrl = value;
				if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
					_baseUrl += '/';
			}
		}

		protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

		static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

		partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
		partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
		partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual System.Threading.Tasks.Task RaceResultTypePostAsync(RaceResultType body)
		{
			return RaceResultTypePostAsync(body, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task RaceResultTypePostAsync(RaceResultType body, System.Threading.CancellationToken cancellationToken)
		{
			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
					var content_ = new System.Net.Http.StringContent(json_);
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
					// Operation Path: "RaceResult/RaceResultType"
					urlBuilder_.Append("RaceResult/RaceResultType");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							return;
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RaceResultType>> RaceResultTypeGetAsync()
		{
			return RaceResultTypeGetAsync(System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RaceResultType>> RaceResultTypeGetAsync(System.Threading.CancellationToken cancellationToken)
		{
			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
					// Operation Path: "RaceResult/RaceResultType"
					urlBuilder_.Append("RaceResult/RaceResultType");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RaceResultType>>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual System.Threading.Tasks.Task RaceResultTypePutAsync(RaceResultType body)
		{
			return RaceResultTypePutAsync(body, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task RaceResultTypePutAsync(RaceResultType body, System.Threading.CancellationToken cancellationToken)
		{
			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
					var content_ = new System.Net.Http.StringContent(json_);
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("PUT");

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
					// Operation Path: "RaceResult/RaceResultType"
					urlBuilder_.Append("RaceResult/RaceResultType");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							return;
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual System.Threading.Tasks.Task<RaceResultType> RaceResultTypeGetAsync(int raceResultTypeID)
		{
			return RaceResultTypeGetAsync(raceResultTypeID, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<RaceResultType> RaceResultTypeGetAsync(int raceResultTypeID, System.Threading.CancellationToken cancellationToken)
		{
			if (raceResultTypeID == null)
				throw new System.ArgumentNullException("raceResultTypeID");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
					// Operation Path: "RaceResult/RaceResultType/{raceResultTypeID}"
					urlBuilder_.Append("RaceResult/RaceResultType/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(raceResultTypeID, System.Globalization.CultureInfo.InvariantCulture)));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<RaceResultType>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual System.Threading.Tasks.Task RaceResultTypeDeleteAsync(int raceResultTypeID)
		{
			return RaceResultTypeDeleteAsync(raceResultTypeID, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task RaceResultTypeDeleteAsync(int raceResultTypeID, System.Threading.CancellationToken cancellationToken)
		{
			if (raceResultTypeID == null)
				throw new System.ArgumentNullException("raceResultTypeID");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("DELETE");

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
					// Operation Path: "RaceResult/RaceResultType/{raceResultTypeID}"
					urlBuilder_.Append("RaceResult/RaceResultType/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(raceResultTypeID, System.Globalization.CultureInfo.InvariantCulture)));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							return;
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual System.Threading.Tasks.Task RaceResultPostAsync(RaceResult body)
		{
			return RaceResultPostAsync(body, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task RaceResultPostAsync(RaceResult body, System.Threading.CancellationToken cancellationToken)
		{
			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
					var content_ = new System.Net.Http.StringContent(json_);
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
					// Operation Path: "RaceResult"
					urlBuilder_.Append("RaceResult");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							return;
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RaceResult>> RaceResultGetAsync()
		{
			return RaceResultGetAsync(System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RaceResult>> RaceResultGetAsync(System.Threading.CancellationToken cancellationToken)
		{
			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
					// Operation Path: "RaceResult"
					urlBuilder_.Append("RaceResult");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RaceResult>>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual System.Threading.Tasks.Task RaceResultPutAsync(RaceResult body)
		{
			return RaceResultPutAsync(body, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task RaceResultPutAsync(RaceResult body, System.Threading.CancellationToken cancellationToken)
		{
			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
					var content_ = new System.Net.Http.StringContent(json_);
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("PUT");

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
					// Operation Path: "RaceResult"
					urlBuilder_.Append("RaceResult");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							return;
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual System.Threading.Tasks.Task<RaceResult> RaceResultGetAsync(int raceID)
		{
			return RaceResultGetAsync(raceID, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<RaceResult> RaceResultGetAsync(int raceID, System.Threading.CancellationToken cancellationToken)
		{
			if (raceID == null)
				throw new System.ArgumentNullException("raceID");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
					// Operation Path: "RaceResult/{raceID}"
					urlBuilder_.Append("RaceResult/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(raceID, System.Globalization.CultureInfo.InvariantCulture)));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<RaceResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual System.Threading.Tasks.Task RaceResultDeleteAsync(int raceID)
		{
			return RaceResultDeleteAsync(raceID, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>Success</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task RaceResultDeleteAsync(int raceID, System.Threading.CancellationToken cancellationToken)
		{
			if (raceID == null)
				throw new System.ArgumentNullException("raceID");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("DELETE");

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
					// Operation Path: "RaceResult/{raceID}"
					urlBuilder_.Append("RaceResult/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(raceID, System.Globalization.CultureInfo.InvariantCulture)));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							return;
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		protected struct ObjectResponseResult<T>
		{
			public ObjectResponseResult(T responseObject, string responseText)
			{
				this.Object = responseObject;
				this.Text = responseText;
			}

			public T Object { get; }

			public string Text { get; }
		}

		public bool ReadResponseAsString { get; set; }

		protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
		{
			if (response == null || response.Content == null)
			{
				return new ObjectResponseResult<T>(default(T), string.Empty);
			}

			if (ReadResponseAsString)
			{
				var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
				try
				{
					var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
					return new ObjectResponseResult<T>(typedBody, responseText);
				}
				catch (Newtonsoft.Json.JsonException exception)
				{
					var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
					throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
				}
			}
			else
			{
				try
				{
					using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
					using (var streamReader = new System.IO.StreamReader(responseStream))
					using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
					{
						var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
						var typedBody = serializer.Deserialize<T>(jsonTextReader);
						return new ObjectResponseResult<T>(typedBody, string.Empty);
					}
				}
				catch (Newtonsoft.Json.JsonException exception)
				{
					var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
					throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
				}
			}
		}

		private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
		{
			if (value == null)
			{
				return "";
			}

			if (value is System.Enum)
			{
				var name = System.Enum.GetName(value.GetType(), value);
				if (name != null)
				{
					var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
					if (field != null)
					{
						var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
							as System.Runtime.Serialization.EnumMemberAttribute;
						if (attribute != null)
						{
							return attribute.Value != null ? attribute.Value : name;
						}
					}

					var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
					return converted == null ? string.Empty : converted;
				}
			}
			else if (value is bool)
			{
				return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
			}
			else if (value is byte[])
			{
				return System.Convert.ToBase64String((byte[])value);
			}
			else if (value is string[])
			{
				return string.Join(",", (string[])value);
			}
			else if (value.GetType().IsArray)
			{
				var valueArray = (System.Array)value;
				var valueTextArray = new string[valueArray.Length];
				for (var i = 0; i < valueArray.Length; i++)
				{
					valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
				}
				return string.Join(",", valueTextArray);
			}

			var result = System.Convert.ToString(value, cultureInfo);
			return result == null ? "" : result;
		}
	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class Country
	{
		[Newtonsoft.Json.JsonProperty("countryId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int CountryId { get; set; }

		[Newtonsoft.Json.JsonProperty("countryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string CountryName { get; set; }

		[Newtonsoft.Json.JsonProperty("countryFlag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public byte[] CountryFlag { get; set; }

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class DateOnly
	{
		[Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int Year { get; set; }

		[Newtonsoft.Json.JsonProperty("month", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int Month { get; set; }

		[Newtonsoft.Json.JsonProperty("day", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int Day { get; set; }

		[Newtonsoft.Json.JsonProperty("dayOfWeek", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public DayOfWeek DayOfWeek { get; set; }

		[Newtonsoft.Json.JsonProperty("dayOfYear", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int DayOfYear { get; set; }

		[Newtonsoft.Json.JsonProperty("dayNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int DayNumber { get; set; }

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum DayOfWeek
	{

		_0 = 0,

		_1 = 1,

		_2 = 2,

		_3 = 3,

		_4 = 4,

		_5 = 5,

		_6 = 6,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class Driver
	{
		[Newtonsoft.Json.JsonProperty("driverId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int DriverId { get; set; }

		[Newtonsoft.Json.JsonProperty("driverCountryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? DriverCountryId { get; set; }

		[Newtonsoft.Json.JsonProperty("driverName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string DriverName { get; set; }

		[Newtonsoft.Json.JsonProperty("dateOfBirth", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public DateOnly DateOfBirth { get; set; }

		[Newtonsoft.Json.JsonProperty("startingNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? StartingNumber { get; set; }

		[Newtonsoft.Json.JsonProperty("driverTeamId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? DriverTeamId { get; set; }

		[Newtonsoft.Json.JsonProperty("driverCountry", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Country DriverCountry { get; set; }

		[Newtonsoft.Json.JsonProperty("driverTeam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Team DriverTeam { get; set; }

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class Race
	{
		[Newtonsoft.Json.JsonProperty("raceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int RaceId { get; set; }

		[Newtonsoft.Json.JsonProperty("racetrackId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int RacetrackId { get; set; }

		[Newtonsoft.Json.JsonProperty("driverId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int DriverId { get; set; }

		[Newtonsoft.Json.JsonProperty("raceDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.DateTimeOffset RaceDate { get; set; }

		[Newtonsoft.Json.JsonProperty("raceTypeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int RaceTypeId { get; set; }

		[Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Comment { get; set; }

		[Newtonsoft.Json.JsonProperty("driver", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Driver Driver { get; set; }

		[Newtonsoft.Json.JsonProperty("raceType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public RaceType RaceType { get; set; }

		[Newtonsoft.Json.JsonProperty("racetrack", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Racetrack Racetrack { get; set; }

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class RaceResult
	{
		[Newtonsoft.Json.JsonProperty("raceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int RaceId { get; set; }

		[Newtonsoft.Json.JsonProperty("raceResultTypeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int RaceResultTypeId { get; set; }

		[Newtonsoft.Json.JsonProperty("durationMs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public long? DurationMs { get; set; }

		[Newtonsoft.Json.JsonProperty("distanceKm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public double? DistanceKm { get; set; }

		[Newtonsoft.Json.JsonProperty("race", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Race Race { get; set; }

		[Newtonsoft.Json.JsonProperty("raceResultType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public RaceResultType RaceResultType { get; set; }

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class RaceResultType
	{
		[Newtonsoft.Json.JsonProperty("raceResultTypeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int RaceResultTypeId { get; set; }

		[Newtonsoft.Json.JsonProperty("raceResultShort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string RaceResultShort { get; set; }

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class RaceType
	{
		[Newtonsoft.Json.JsonProperty("raceTypeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int RaceTypeId { get; set; }

		[Newtonsoft.Json.JsonProperty("raceTypeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string RaceTypeName { get; set; }

		[Newtonsoft.Json.JsonProperty("raceTypeShort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string RaceTypeShort { get; set; }

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class Racetrack
	{
		[Newtonsoft.Json.JsonProperty("racetrackId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int RacetrackId { get; set; }

		[Newtonsoft.Json.JsonProperty("racetrackName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string RacetrackName { get; set; }

		[Newtonsoft.Json.JsonProperty("racetrackDistanceKm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public double? RacetrackDistanceKm { get; set; }

		[Newtonsoft.Json.JsonProperty("racetrackCountryId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int RacetrackCountryId { get; set; }

		[Newtonsoft.Json.JsonProperty("racetrackCountry", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Country RacetrackCountry { get; set; }

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class Team
	{
		[Newtonsoft.Json.JsonProperty("teamId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int TeamId { get; set; }

		[Newtonsoft.Json.JsonProperty("teamName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string TeamName { get; set; }

		[Newtonsoft.Json.JsonProperty("teamCountryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? TeamCountryId { get; set; }

	}



	[System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class ApiException : System.Exception
	{
		public int StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

		public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
			: base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
		}

		public override string ToString()
		{
			return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
		}
	}

	[System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class ApiException<TResult> : ApiException
	{
		public TResult Result { get; private set; }

		public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
			: base(message, statusCode, response, headers, innerException)
		{
			Result = result;
		}
	}

}

#pragma warning restore 108
#pragma warning restore 114
#pragma warning restore 472
#pragma warning restore 612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625